import sys
sys.path.append('C:\\Users\\User\\Desktop\\Giorgos\\Dev\\emulators\\chip8')
import os
import os.path
import re
from typing import *
from utils.console import console
from asm import lexer
from asm import tparser

code: str = """
.ascii "HelloWorld"
jmp main
main:
    load v1, 0
    load [I], letter_H
    draw v1, v2, 5

    add v1 6
    load [I], letter_E
    draw v1, v2, 5

    add v1 5
    load [I], letter_L
    draw v1, v2, 5

    add v1 5
    load [I], letter_L
    draw v1, v2, 5

    add v1 5
    load [I], letter_O
    draw v1, v2, 5

    add v2 6
    load v1, 0
    load [I], letter_W
    draw v1, v2, 5

    add v1 6
    load [I], letter_O
    draw v1, v2, 5
    
    add v1 5
    load [I], letter_R
    draw v1, v2, 5

    add v1 5
    load [I], letter_L
    draw v1, v2, 5
    
    add v1 5
    load [I], letter_D
    draw v1, v2, 5

    jmp inf
inf: jmp inf

.font letter_E 0xE0 0x80 0xC0 0x80 0xE0, endfont
.font letter_D 0xC0 0xA0 0xA0 0xA0 0xC0, endfont
.font letter_O 0xE0 0xA0 0xA0 0xA0 0xE0, endfont
.font letter_H 0x88 0x88 0xF8 0x88 0x88, endfont
.font letter_L 0x80 0x80 0x80 0x80 0xE0, endfont
.font letter_W 0x88 0x88 0xA8 0xA8 0xF8, endfont
.font letter_R 0xE0 0xA0 0xE0 0xC0 0xA0, endfont
"""

filename = os.path.basename(__file__)
lex      = lexer.Lexer()
tokens   = lex.tokenize(code)
parser   = tparser.Parser(filename)
binary   = parser.parse(tokens)
expected = bytearray([0x48, 0x65, 0x6C, 0x6C, 0x6F, 0x57, 0x6F, 0x72, 0x6C, 0x64, 0x12, 0x0C, 0x61, 0x00, 0xA2, 0x5D, 0xD1, 0x25, 0x71, 0x06, 0xA2, 0x4E, 0xD1, 0x25, 0x71, 0x05, 0xA2, 0x62, 0xD1, 0x25, 0x71, 0x05, 0xA2, 0x62, 0xD1, 0x25, 0x71, 0x05, 0xA2, 0x58, 0xD1, 0x25, 0x72, 0x06, 0x61, 0x00, 0xA2, 0x67, 0xD1, 0x25, 0x71, 0x06, 0xA2, 0x58, 0xD1, 0x25, 0x71, 0x05, 0xA2, 0x6C, 0xD1, 0x25, 0x71, 0x05, 0xA2, 0x62, 0xD1, 0x25, 0x71, 0x05, 0xA2, 0x53, 0xD1, 0x25, 0x12, 0x4C, 0x12, 0x4C, 0xE0, 0x80, 0xC0, 0x80, 0xE0, 0xC0, 0xA0, 0xA0, 0xA0, 0xC0, 0xE0, 0xA0, 0xA0, 0xA0, 0xE0, 0x88, 0x88, 0xF8, 0x88, 0x88, 0x80, 0x80, 0x80, 0x80, 0xE0, 0x88, 0x88, 0xA8, 0xA8, 0xF8, 0xE0, 0xA0, 0xE0, 0xC0, 0xA0])

if binary == expected: console.done(f"{filename} passed")
else: console.error(f"{filename} failed")